{"version":3,"sources":["components/Header.js","components/Player.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Header","Player","props","userEmail","React","createRef","onSubmit","event","preventDefault","email","current","value","type","defaultValue","ref","Cell","state","onClick","className","Object","keys","join","Game","game","ended","board","map","row","y","cell","x","App","updatePlayerState","player","setState","getEmail","onUserChange","fetch","then","response","json","createNewGame","rows","window","prompt","columns","mines","config","body","JSON","stringify","method","headers","onCellClick","this","currentGame","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2PAMeA,G,MAJA,kBACX,6CC0BWC,EA3BA,SAACC,GACZ,IAAIC,EAAYC,IAAMC,YAYtB,OACI,0BAAMC,SAXO,SAACC,GACdA,EAAMC,iBAEN,IAAMC,EAAQN,EAAUO,QAAQC,MAE5BF,GACAP,EAAMI,SAASG,KAMf,wCAEI,2BACIG,KAAK,OACLC,aAAa,kBACbC,IAAKX,KAEb,4CCtBNY,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,QAAV,OACT,wBAAIC,UAAS,eAAUC,OAAOC,KAAKJ,GAAOK,KAAK,KAAlC,YAA0D,IAAhBL,EAAML,OAAe,SAAWM,QAASA,GAC3FD,EAAML,OAAS,KAkBTW,EAdF,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMN,EAAT,EAASA,QAAT,OACT,2BAAOC,UAAS,yBAAoBK,EAAKC,OAAS,UAC9C,+BACKD,EAAKE,MAAMC,KAAI,SAACC,EAAKC,GAAN,OACZ,4BACKD,EAAID,KACD,SAACG,EAAMC,GAAP,OAAa,kBAAC,EAAD,CAAMd,MAAOa,EAAMZ,QAAS,kBAAMA,EAAQ,CAAEa,IAAGF,mBC+DrEG,E,2MAnEbf,MAAQ,G,EAERgB,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CAAED,Y,EAGlBE,SAAW,WACT,OAAO,EAAKnB,MAAMiB,OAAOxB,O,EAG3B2B,aAAe,SAAC3B,GACd4B,MAAM,gBAAD,OAAiB5B,IACnB6B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,KAAK,EAAKN,oB,EAGfS,cAAgB,WACd,IAAMhC,EAAQ,EAAK0B,WACbO,EAAOC,OAAOC,OAAO,QAAS,MAC9BC,EAAUF,OAAOC,OAAO,WAAY,MACpCE,EAAQH,OAAOC,OAAO,SAAU,MAEhCG,EAAS,CACbC,KAAMC,KAAKC,UAAU,CAAEzC,QAAOsC,OAAQ,CAAEL,OAAMG,UAASC,WACvDK,OAAQ,OACRC,QAAS,CACP,eAAgB,qBAIpBf,MAAM,gBAAiBU,GACpBT,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,KAAK,EAAKN,oB,EAGfqB,YAAc,YAAe,IAAZvB,EAAW,EAAXA,EAAGF,EAAQ,EAARA,EACZnB,EAAQ,EAAK0B,WACbY,EAAS,CACbC,KAAMC,KAAKC,UAAU,CAAEzC,QAAOqB,IAAGF,MACjCuB,OAAQ,OACRC,QAAS,CACP,eAAgB,qBAIpBf,MAAM,eAAgBU,GACnBT,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,KAAK,EAAKN,oB,wEAGL,IACAC,EAAWqB,KAAKtC,MAAhBiB,OAER,OACE,yBAAKf,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQZ,SAAUgD,KAAKlB,eACtBH,GAAUA,EAAOsB,aAChB,kBAAC,EAAD,CAAMhC,KAAMU,EAAOsB,YAAatC,QAASqC,KAAKD,cAE/CpB,GACC,4BAAQhB,QAASqC,KAAKb,eAAtB,wB,GA/DQrC,IAAMoD,WCIJC,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,iB","file":"static/js/main.d394221d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => (\r\n    <h1>Minesweeper</h1>\r\n);\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Player = (props) => {\r\n    let userEmail = React.createRef();\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const email = userEmail.current.value;\r\n\r\n        if (email) {\r\n            props.onSubmit(email);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <label>\r\n                Player\r\n                <input\r\n                    type=\"text\"\r\n                    defaultValue=\"j.doe@gmail.com\"\r\n                    ref={userEmail} />\r\n            </label>\r\n            <button>Submit</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Player;\r\n","import React from 'react';\r\n\r\nconst Cell = ({ state, onClick }) => (\r\n    <td className={`cell ${Object.keys(state).join(' ')} ${state.value === 0 && 'empty'}`} onClick={onClick}>\r\n        {state.value || ''}\r\n    </td>\r\n);\r\n\r\nconst Game = ({ game, onClick }) => (\r\n    <table className={`game-container ${game.ended && 'ended'}`}>\r\n        <tbody>\r\n            {game.board.map((row, y) => (\r\n                <tr>\r\n                    {row.map(\r\n                        (cell, x) => <Cell state={cell} onClick={() => onClick({ x, y })} />\r\n                    )}\r\n                </tr>\r\n            ))}\r\n        </tbody>\r\n    </table>\r\n);\r\n\r\nexport default Game;","import React from 'react';\nimport './App.css';\n\nimport Header from './components/Header';\nimport Player from './components/Player';\nimport GamesList from './components/GamesList';\nimport Game from './components/Game';\n\nclass App extends React.Component {\n\n  state = {}\n\n  updatePlayerState = (player) => {\n    this.setState({ player });\n  }\n\n  getEmail = () => {\n    return this.state.player.email;\n  }\n\n  onUserChange = (email) => {\n    fetch(`./api/player/${email}`)\n      .then(response => response.json())\n      .then(this.updatePlayerState);\n  }\n\n  createNewGame = () => {\n    const email = this.getEmail();\n    const rows = window.prompt('Rows:', '10');\n    const columns = window.prompt('Columns:', '10');\n    const mines = window.prompt('Mines:', '10');\n\n    const config = {\n      body: JSON.stringify({ email, config: { rows, columns, mines } }),\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    fetch(`./api/create/`, config)\n      .then(response => response.json())\n      .then(this.updatePlayerState);\n  }\n\n  onCellClick = ({ x, y }) => {\n    const email = this.getEmail();\n    const config = {\n      body: JSON.stringify({ email, x, y }),\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    fetch(`./api/click/`, config)\n      .then(response => response.json())\n      .then(this.updatePlayerState);\n  }\n\n  render() {\n    const { player } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Header />\n        <Player onSubmit={this.onUserChange} />\n        {player && player.currentGame &&\n          <Game game={player.currentGame} onClick={this.onCellClick} />\n        }\n        {player &&\n          <button onClick={this.createNewGame}>Create new game</button>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}